# -*- coding: utf-8 -*-

import unittest
import node
from block import Block


class TestCodegen(unittest.TestCase):
    def test_root(self):
        r = node.new("RootNode")
        p = node.new("MessageNode")
        p.setSingleParameter("title", "hello")
        p.setSingleParameter("message", "hello")
        blk = Block()
        blk.insert(p)
        r.setSingleChildBlock("block", blk)
        generated = r.generate()
        self.assertEqual(generated[0], "# generated by nyancode.")
        self.assertEqual(
            generated[1],
            "import nyancode_runtime_std as nyancode")
        self.assertEqual(generated[2], "")
        self.assertEqual(
            generated[3],
            "nyancode.message(\"hello\", \"hello\")")

    def test_root_for_direct_run(self):
        r = node.new("RootNode")
        p = node.new("MessageNode")
        p.setSingleParameter("title", "hello")
        p.setSingleParameter("message", "hello")
        blk = Block()
        blk.insert(p)
        r.setSingleChildBlock("block", blk)
        generated = r.generate(for_direct_run=True)
        self.assertEqual(generated[0], "# generated by nyancode.")
        self.assertEqual(generated[1], "")
        self.assertEqual(
            generated[2],
            "nyancode.message(\"hello\", \"hello\")")

    def test_indented_node(self):
        n = node.new("MessageNode")
        n.setSingleParameter("title", "meow")
        n.setSingleParameter("message", "meow")
        generated = n.generate(indent_level=1)
        self.assertEqual(
            "    nyancode.message(\"meow\", \"meow\")",
            generated[0])

    def test_message(self):
        n = node.new("MessageNode")
        n.setSingleParameter("title", "meow")
        n.setSingleParameter("message", "meow")
        generated = n.generate()
        self.assertEqual("nyancode.message(\"meow\", \"meow\")", generated[0])

    def test_wait(self):
        n = node.new("WaitNode")
        n.setSingleParameter("time", 1.5)
        generated = n.generate()
        self.assertEqual("nyancode.wait(1.5)", generated[0])

    def test_questionBranch(self):
        n = node.new("QuestionBranchNode")
        n.setSingleParameter("title", "title")
        n.setSingleParameter("message", "message")
        nsub = node.new("MessageNode")
        nsub.setSingleParameter("title", "subtitle")
        nsub.setSingleParameter("message", "submessage")
        yblk = Block()
        yblk.insert(nsub)
        nblk = Block()
        n.setSingleChildBlock("yes", yblk)
        n.setSingleChildBlock("no", nblk)
        generated = n.generate()
        want = [
            "if nyancode.question(\"title\", \"message\"):",
            "    nyancode.message(\"subtitle\", \"submessage\")",
            "else:",
            "    pass"
        ]
        self.assertEqual(want, generated)

    def test_fiftyFiftyBranch(self):
        n = node.new("FiftyFiftyBranchNode")
        nsub = node.new("MessageNode")
        nsub.setSingleParameter("title", "subtitle")
        nsub.setSingleParameter("message", "submessage")
        blk1 = Block()
        blk1.insert(nsub)
        blk2 = Block()
        n.setSingleChildBlock("pattern1", blk1)
        n.setSingleChildBlock("pattern2", blk2)
        generated = n.generate()
        want = [
            "if nyancode.randomPattern(2) == 1:",
            "    nyancode.message(\"subtitle\", \"submessage\")",
            "else:",
            "    pass"
        ]
        self.assertEqual(want, generated)

    def test_loop(self):
        n = node.new("LoopNode")
        n.setSingleParameter("count", 5)
        nsub = node.new("MessageNode")
        nsub.setSingleParameter("title", "subtitle")
        nsub.setSingleParameter("message", "submessage")
        blk1 = Block()
        blk1.insert(nsub)
        n.setSingleChildBlock("block", blk1)
        generated = n.generate()
        want = [
            "for i in range(5):",
            "    nyancode.message(\"subtitle\", \"submessage\")"
        ]
        self.assertEqual(want, generated)

    def test_playOneShot(self):
        n = node.new("PlayOneShotNode")
        n.setSingleParameter("path", "D:\\audio.wav")
        generated = n.generate()
        self.assertEqual(
            "nyancode.playOneShot(\"D:\\audio.wav\")",
            generated[0])

    def test_playOneShotAndWait(self):
        n = node.new("PlayOneShotAndWaitNode")
        n.setSingleParameter("path", "D:\\audio.wav")
        generated = n.generate()
        self.assertEqual(
            "nyancode.playOneShotAndWait(\"D:\\audio.wav\")",
            generated[0])
